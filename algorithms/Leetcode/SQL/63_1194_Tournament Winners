Table: Players
+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| player_id   | int   |
| group_id    | int   |
+-------------+-------+
player_id is the primary key of this table.
Each row of this table indicates the group of each player.
Table: Matches
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| match_id      | int     |
| first_player  | int     |
| second_player | int     |
| first_score   | int     |
| second_score  | int     |
+---------------+---------+
match_id is the primary key of this table.
Each row is a record of a match, first_player and second_player contain the player_id of each match.
first_score and second_score contain the number of points of the first_player and second_player
respectively.
You may assume that, in each match, players belong to the same group.

The winner in each group is the player who scored the maximum total points within the group.
In the case of a tie, the lowest player_id wins.

Write an SQL query to find the winner in each group.

Return the result table in any order.

The query result format is in the following example.
Example 1:
Input:
Players table:
+-----------+------------+
| player_id | group_id   |
+-----------+------------+
| 15        | 1          |
| 25        | 1          |
| 30        | 1          |
| 45        | 1          |
| 10        | 2          |
| 35        | 2          |
| 50        | 2          |
| 20        | 3          |
| 40        | 3          |
+-----------+------------+
Matches table:
+------------+--------------+---------------+-------------+--------------+
| match_id   | first_player | second_player | first_score | second_score |
+------------+--------------+---------------+-------------+--------------+
| 1          | 15           | 45            | 3           | 0            |
| 2          | 30           | 25            | 1           | 2            |
| 3          | 30           | 15            | 2           | 0            |
| 4          | 40           | 20            | 5           | 2            |
| 5          | 35           | 50            | 1           | 1            |
+------------+--------------+---------------+-------------+--------------+
Output:
+-----------+------------+
| group_id  | player_id  |
+-----------+------------+
| 1         | 15         |
| 2         | 35         |
| 3         | 40         |
+-----------+------------+

---------------------------------------------------------------------------------------
-- Runtime: 1080 ms, faster than 14.43%
select group_id, player_id from
(
select p.group_id, p.player_id, rank() over (partition by p.group_id order by sum(m.score) desc, p.player_id asc) rk from
(
select first_player player_id, sum(first_score) score from Matches  group by first_player
union all
select second_player player_id, sum(second_score) score from Matches group by second_player) m
join Players p on m.player_id = p.player_id
group by p.group_id, p.player_id
) result where rk = 1

-- Runtime: 829 ms, faster than 35.93%
select group_id, player_id from
(
select p.group_id, p.player_id,
rank() over (partition by p.group_id order by sum(case when p.player_id = m.first_player then m.first_score else m.second_score end) desc, p.player_id asc) rk
from players p join matches m on p.player_id in (m.first_player, m.second_player)
group by p.group_id, p.player_id ) t where rk = 1