Table Variables:
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| name          | varchar |
| value         | int     |
+---------------+---------+
name is the primary key for this table.
This table contains the stored variables and their values.

Table Expressions:
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| left_operand  | varchar |
| operator      | enum    |
| right_operand | varchar |
+---------------+---------+
(left_operand, operator, right_operand) is the primary key for this table.
This table contains a boolean expression that should be evaluated.
operator is an enum that takes one of the values ('<', '>', '=')
The values of left_operand and right_operand are guaranteed to be in the Variables table.


Write an SQL query to evaluate the boolean expressions in Expressions table.
Return the result table in any order.
The query result format is in the following example.
Example 1:
Input:
Variables table:
+------+-------+
| name | value |
+------+-------+
| x    | 66    |
| y    | 77    |
+------+-------+
Expressions table:
+--------------+----------+---------------+
| left_operand | operator | right_operand |
+--------------+----------+---------------+
| x            | >        | y             |
| x            | <        | y             |
| x            | =        | y             |
| y            | >        | x             |
| y            | <        | x             |
| x            | =        | x             |
+--------------+----------+---------------+
Output:
+--------------+----------+---------------+-------+
| left_operand | operator | right_operand | value |
+--------------+----------+---------------+-------+
| x            | >        | y             | false |
| x            | <        | y             | true  |
| x            | =        | y             | false |
| y            | >        | x             | true  |
| y            | <        | x             | false |
| x            | =        | x             | true  |
+--------------+----------+---------------+-------+
Explanation:
As shown, you need to find the value of each boolean expression in the table using the variables table
----------------------------------------------------------------------
-- Runtime: 1577 ms, faster than 11.16%
select l.left_operand,l.operator,l.right_operand,
case when l.operator='<' and l.left_value < r.right_value then "true"
when l.operator='>' and l.left_value > r.right_value then "true"
when l.operator='=' and l.left_value = r.right_value then "true" else "false" end as value
FROM
(select value as left_value, left_operand, operator, right_operand from variables, Expressions where name = left_operand) l,
(select left_operand, operator, right_operand, value as right_value from Expressions, variables where name = right_operand) r
where
	l.left_operand = r.left_operand
and l.operator = r.operator
and l.right_operand = r.right_operand;

-- Runtime: 1335 ms, faster than 26.92%
select e1.left_operand, e1.operator, e1.right_operand,
case
 when e1.operator='<' and v1.value < v2.value then "true"
 when e1.operator='>' and v1.value > v2.value then "true"
 when e1.operator='=' and v1.value = v2.value then "true" else "false" end as value
FROM
variables v1 join Expressions e1 on v1.name = e1.left_operand
join variables v2 on v2.name = e1.right_operand;